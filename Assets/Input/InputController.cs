//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""PlayerCore"",
            ""id"": ""157f2fe6-c682-494b-b9ee-a9e7770cc72b"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""0348f1bc-2d00-416d-a990-5ee510034735"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""6640d45e-1116-48db-81bb-91a9ba3e862e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""7130154b-4d5d-460c-a1b8-de8a56cc440b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""fd76104a-e6bc-47bd-ba57-4ac30e36e359"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9626e4ec-81b7-417e-b8f8-b16a39f9486f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ad7c302a-5323-4936-9bf9-9e1819f9c4c6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""778113d5-8dcb-492b-99bf-c3a3f0d33680"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1c1e95f0-1866-409b-92d1-f34c7d8f0dee"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f58cff70-25d6-4294-9172-57ee79f3389e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""147a55bb-7374-47ad-91a7-277cb3c4e5fe"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerCore
        m_PlayerCore = asset.FindActionMap("PlayerCore", throwIfNotFound: true);
        m_PlayerCore_Movement = m_PlayerCore.FindAction("Movement", throwIfNotFound: true);
        m_PlayerCore_Attack = m_PlayerCore.FindAction("Attack", throwIfNotFound: true);
        m_PlayerCore_Pause = m_PlayerCore.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerCore
    private readonly InputActionMap m_PlayerCore;
    private IPlayerCoreActions m_PlayerCoreActionsCallbackInterface;
    private readonly InputAction m_PlayerCore_Movement;
    private readonly InputAction m_PlayerCore_Attack;
    private readonly InputAction m_PlayerCore_Pause;
    public struct PlayerCoreActions
    {
        private @InputController m_Wrapper;
        public PlayerCoreActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerCore_Movement;
        public InputAction @Attack => m_Wrapper.m_PlayerCore_Attack;
        public InputAction @Pause => m_Wrapper.m_PlayerCore_Pause;
        public InputActionMap Get() { return m_Wrapper.m_PlayerCore; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerCoreActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerCoreActions instance)
        {
            if (m_Wrapper.m_PlayerCoreActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerCoreActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerCoreActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerCoreActionsCallbackInterface.OnMovement;
                @Attack.started -= m_Wrapper.m_PlayerCoreActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayerCoreActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayerCoreActionsCallbackInterface.OnAttack;
                @Pause.started -= m_Wrapper.m_PlayerCoreActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_PlayerCoreActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_PlayerCoreActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_PlayerCoreActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public PlayerCoreActions @PlayerCore => new PlayerCoreActions(this);
    public interface IPlayerCoreActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
